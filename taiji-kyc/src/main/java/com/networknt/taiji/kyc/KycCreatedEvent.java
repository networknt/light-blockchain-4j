/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.networknt.taiji.kyc;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class KycCreatedEvent extends org.apache.avro.specific.SpecificRecordBase implements KycEvent {
  private static final long serialVersionUID = 1790598769988526563L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KycCreatedEvent\",\"namespace\":\"com.networknt.taiji.kyc\",\"fields\":[{\"name\":\"EventId\",\"type\":{\"type\":\"record\",\"name\":\"EventId\",\"namespace\":\"com.networknt.taiji.event\",\"fields\":[{\"name\":\"address\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"owner address that create the token\"},{\"name\":\"nonce\",\"type\":\"long\",\"doc\":\"the number of the transactions for the address\"}]}},{\"name\":\"currency\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"the currency blockchain the token is associated to\"},{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"KycType\",\"symbols\":[\"P\",\"B\"]},\"doc\":\"KYC type, P for personal and B for business\"},{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"unique identifier for the user or business\"},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"email address of the address owner or business contact\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"personal or business name\"},{\"name\":\"referralAddress\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"referral address, optional with default value null\",\"default\":null},{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"public key for encryption\"},{\"name\":\"verified\",\"type\":\"boolean\",\"doc\":\"If the email is verified\",\"default\":false},{\"name\":\"tags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}],\"doc\":\"tags to categorize the person or business\",\"default\":null},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Description of person or business which can be full text searched\",\"default\":null},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"time the event is recorded on the blockchain\",\"default\":0},{\"name\":\"offset\",\"type\":\"long\",\"doc\":\"kafka partition offset\",\"default\":0},{\"name\":\"partition\",\"type\":\"int\",\"doc\":\"kafka partition id\",\"default\":0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<KycCreatedEvent> ENCODER =
      new BinaryMessageEncoder<KycCreatedEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<KycCreatedEvent> DECODER =
      new BinaryMessageDecoder<KycCreatedEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<KycCreatedEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<KycCreatedEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<KycCreatedEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<KycCreatedEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this KycCreatedEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a KycCreatedEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a KycCreatedEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static KycCreatedEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private com.networknt.taiji.event.EventId EventId;
  /** the currency blockchain the token is associated to */
   private java.lang.String currency;
  /** KYC type, P for personal and B for business */
   private com.networknt.taiji.kyc.KycType type;
  /** unique identifier for the user or business */
   private java.lang.String id;
  /** email address of the address owner or business contact */
   private java.lang.String email;
  /** personal or business name */
   private java.lang.String name;
  /** referral address, optional with default value null */
   private java.lang.String referralAddress;
  /** public key for encryption */
   private java.lang.String key;
  /** If the email is verified */
   private boolean verified;
  /** tags to categorize the person or business */
   private java.util.List<java.lang.String> tags;
  /** Description of person or business which can be full text searched */
   private java.lang.String description;
  /** time the event is recorded on the blockchain */
   private long timestamp;
  /** kafka partition offset */
   private long offset;
  /** kafka partition id */
   private int partition;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public KycCreatedEvent() {}

  /**
   * All-args constructor.
   * @param EventId The new value for EventId
   * @param currency the currency blockchain the token is associated to
   * @param type KYC type, P for personal and B for business
   * @param id unique identifier for the user or business
   * @param email email address of the address owner or business contact
   * @param name personal or business name
   * @param referralAddress referral address, optional with default value null
   * @param key public key for encryption
   * @param verified If the email is verified
   * @param tags tags to categorize the person or business
   * @param description Description of person or business which can be full text searched
   * @param timestamp time the event is recorded on the blockchain
   * @param offset kafka partition offset
   * @param partition kafka partition id
   */
  public KycCreatedEvent(com.networknt.taiji.event.EventId EventId, java.lang.String currency, com.networknt.taiji.kyc.KycType type, java.lang.String id, java.lang.String email, java.lang.String name, java.lang.String referralAddress, java.lang.String key, java.lang.Boolean verified, java.util.List<java.lang.String> tags, java.lang.String description, java.lang.Long timestamp, java.lang.Long offset, java.lang.Integer partition) {
    this.EventId = EventId;
    this.currency = currency;
    this.type = type;
    this.id = id;
    this.email = email;
    this.name = name;
    this.referralAddress = referralAddress;
    this.key = key;
    this.verified = verified;
    this.tags = tags;
    this.description = description;
    this.timestamp = timestamp;
    this.offset = offset;
    this.partition = partition;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return EventId;
    case 1: return currency;
    case 2: return type;
    case 3: return id;
    case 4: return email;
    case 5: return name;
    case 6: return referralAddress;
    case 7: return key;
    case 8: return verified;
    case 9: return tags;
    case 10: return description;
    case 11: return timestamp;
    case 12: return offset;
    case 13: return partition;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: EventId = (com.networknt.taiji.event.EventId)value$; break;
    case 1: currency = value$ != null ? value$.toString() : null; break;
    case 2: type = (com.networknt.taiji.kyc.KycType)value$; break;
    case 3: id = value$ != null ? value$.toString() : null; break;
    case 4: email = value$ != null ? value$.toString() : null; break;
    case 5: name = value$ != null ? value$.toString() : null; break;
    case 6: referralAddress = value$ != null ? value$.toString() : null; break;
    case 7: key = value$ != null ? value$.toString() : null; break;
    case 8: verified = (java.lang.Boolean)value$; break;
    case 9: tags = (java.util.List<java.lang.String>)value$; break;
    case 10: description = value$ != null ? value$.toString() : null; break;
    case 11: timestamp = (java.lang.Long)value$; break;
    case 12: offset = (java.lang.Long)value$; break;
    case 13: partition = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'EventId' field.
   * @return The value of the 'EventId' field.
   */
  public com.networknt.taiji.event.EventId getEventId() {
    return EventId;
  }


  /**
   * Sets the value of the 'EventId' field.
   * @param value the value to set.
   */
  public void setEventId(com.networknt.taiji.event.EventId value) {
    this.EventId = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return the currency blockchain the token is associated to
   */
  public java.lang.String getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * the currency blockchain the token is associated to
   * @param value the value to set.
   */
  public void setCurrency(java.lang.String value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return KYC type, P for personal and B for business
   */
  public com.networknt.taiji.kyc.KycType getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * KYC type, P for personal and B for business
   * @param value the value to set.
   */
  public void setType(com.networknt.taiji.kyc.KycType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return unique identifier for the user or business
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * unique identifier for the user or business
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return email address of the address owner or business contact
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * email address of the address owner or business contact
   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return personal or business name
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * personal or business name
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'referralAddress' field.
   * @return referral address, optional with default value null
   */
  public java.lang.String getReferralAddress() {
    return referralAddress;
  }


  /**
   * Sets the value of the 'referralAddress' field.
   * referral address, optional with default value null
   * @param value the value to set.
   */
  public void setReferralAddress(java.lang.String value) {
    this.referralAddress = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return public key for encryption
   */
  public java.lang.String getKey() {
    return key;
  }


  /**
   * Sets the value of the 'key' field.
   * public key for encryption
   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'verified' field.
   * @return If the email is verified
   */
  public boolean getVerified() {
    return verified;
  }


  /**
   * Sets the value of the 'verified' field.
   * If the email is verified
   * @param value the value to set.
   */
  public void setVerified(boolean value) {
    this.verified = value;
  }

  /**
   * Gets the value of the 'tags' field.
   * @return tags to categorize the person or business
   */
  public java.util.List<java.lang.String> getTags() {
    return tags;
  }


  /**
   * Sets the value of the 'tags' field.
   * tags to categorize the person or business
   * @param value the value to set.
   */
  public void setTags(java.util.List<java.lang.String> value) {
    this.tags = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return Description of person or business which can be full text searched
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * Description of person or business which can be full text searched
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return time the event is recorded on the blockchain
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * time the event is recorded on the blockchain
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'offset' field.
   * @return kafka partition offset
   */
  public long getOffset() {
    return offset;
  }


  /**
   * Sets the value of the 'offset' field.
   * kafka partition offset
   * @param value the value to set.
   */
  public void setOffset(long value) {
    this.offset = value;
  }

  /**
   * Gets the value of the 'partition' field.
   * @return kafka partition id
   */
  public int getPartition() {
    return partition;
  }


  /**
   * Sets the value of the 'partition' field.
   * kafka partition id
   * @param value the value to set.
   */
  public void setPartition(int value) {
    this.partition = value;
  }

  /**
   * Creates a new KycCreatedEvent RecordBuilder.
   * @return A new KycCreatedEvent RecordBuilder
   */
  public static com.networknt.taiji.kyc.KycCreatedEvent.Builder newBuilder() {
    return new com.networknt.taiji.kyc.KycCreatedEvent.Builder();
  }

  /**
   * Creates a new KycCreatedEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new KycCreatedEvent RecordBuilder
   */
  public static com.networknt.taiji.kyc.KycCreatedEvent.Builder newBuilder(com.networknt.taiji.kyc.KycCreatedEvent.Builder other) {
    if (other == null) {
      return new com.networknt.taiji.kyc.KycCreatedEvent.Builder();
    } else {
      return new com.networknt.taiji.kyc.KycCreatedEvent.Builder(other);
    }
  }

  /**
   * Creates a new KycCreatedEvent RecordBuilder by copying an existing KycCreatedEvent instance.
   * @param other The existing instance to copy.
   * @return A new KycCreatedEvent RecordBuilder
   */
  public static com.networknt.taiji.kyc.KycCreatedEvent.Builder newBuilder(com.networknt.taiji.kyc.KycCreatedEvent other) {
    if (other == null) {
      return new com.networknt.taiji.kyc.KycCreatedEvent.Builder();
    } else {
      return new com.networknt.taiji.kyc.KycCreatedEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for KycCreatedEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KycCreatedEvent>
    implements org.apache.avro.data.RecordBuilder<KycCreatedEvent> {

    private com.networknt.taiji.event.EventId EventId;
    private com.networknt.taiji.event.EventId.Builder EventIdBuilder;
    /** the currency blockchain the token is associated to */
    private java.lang.String currency;
    /** KYC type, P for personal and B for business */
    private com.networknt.taiji.kyc.KycType type;
    /** unique identifier for the user or business */
    private java.lang.String id;
    /** email address of the address owner or business contact */
    private java.lang.String email;
    /** personal or business name */
    private java.lang.String name;
    /** referral address, optional with default value null */
    private java.lang.String referralAddress;
    /** public key for encryption */
    private java.lang.String key;
    /** If the email is verified */
    private boolean verified;
    /** tags to categorize the person or business */
    private java.util.List<java.lang.String> tags;
    /** Description of person or business which can be full text searched */
    private java.lang.String description;
    /** time the event is recorded on the blockchain */
    private long timestamp;
    /** kafka partition offset */
    private long offset;
    /** kafka partition id */
    private int partition;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.networknt.taiji.kyc.KycCreatedEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasEventIdBuilder()) {
        this.EventIdBuilder = com.networknt.taiji.event.EventId.newBuilder(other.getEventIdBuilder());
      }
      if (isValidValue(fields()[1], other.currency)) {
        this.currency = data().deepCopy(fields()[1].schema(), other.currency);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.email)) {
        this.email = data().deepCopy(fields()[4].schema(), other.email);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.name)) {
        this.name = data().deepCopy(fields()[5].schema(), other.name);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.referralAddress)) {
        this.referralAddress = data().deepCopy(fields()[6].schema(), other.referralAddress);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.key)) {
        this.key = data().deepCopy(fields()[7].schema(), other.key);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.verified)) {
        this.verified = data().deepCopy(fields()[8].schema(), other.verified);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.tags)) {
        this.tags = data().deepCopy(fields()[9].schema(), other.tags);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.description)) {
        this.description = data().deepCopy(fields()[10].schema(), other.description);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[11].schema(), other.timestamp);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.offset)) {
        this.offset = data().deepCopy(fields()[12].schema(), other.offset);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.partition)) {
        this.partition = data().deepCopy(fields()[13].schema(), other.partition);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
    }

    /**
     * Creates a Builder by copying an existing KycCreatedEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.networknt.taiji.kyc.KycCreatedEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.EventId)) {
        this.EventId = data().deepCopy(fields()[0].schema(), other.EventId);
        fieldSetFlags()[0] = true;
      }
      this.EventIdBuilder = null;
      if (isValidValue(fields()[1], other.currency)) {
        this.currency = data().deepCopy(fields()[1].schema(), other.currency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.email)) {
        this.email = data().deepCopy(fields()[4].schema(), other.email);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.name)) {
        this.name = data().deepCopy(fields()[5].schema(), other.name);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.referralAddress)) {
        this.referralAddress = data().deepCopy(fields()[6].schema(), other.referralAddress);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.key)) {
        this.key = data().deepCopy(fields()[7].schema(), other.key);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.verified)) {
        this.verified = data().deepCopy(fields()[8].schema(), other.verified);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.tags)) {
        this.tags = data().deepCopy(fields()[9].schema(), other.tags);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.description)) {
        this.description = data().deepCopy(fields()[10].schema(), other.description);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[11].schema(), other.timestamp);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.offset)) {
        this.offset = data().deepCopy(fields()[12].schema(), other.offset);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.partition)) {
        this.partition = data().deepCopy(fields()[13].schema(), other.partition);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'EventId' field.
      * @return The value.
      */
    public com.networknt.taiji.event.EventId getEventId() {
      return EventId;
    }


    /**
      * Sets the value of the 'EventId' field.
      * @param value The value of 'EventId'.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setEventId(com.networknt.taiji.event.EventId value) {
      validate(fields()[0], value);
      this.EventIdBuilder = null;
      this.EventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'EventId' field has been set.
      * @return True if the 'EventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'EventId' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.networknt.taiji.event.EventId.Builder getEventIdBuilder() {
      if (EventIdBuilder == null) {
        if (hasEventId()) {
          setEventIdBuilder(com.networknt.taiji.event.EventId.newBuilder(EventId));
        } else {
          setEventIdBuilder(com.networknt.taiji.event.EventId.newBuilder());
        }
      }
      return EventIdBuilder;
    }

    /**
     * Sets the Builder instance for the 'EventId' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setEventIdBuilder(com.networknt.taiji.event.EventId.Builder value) {
      clearEventId();
      EventIdBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'EventId' field has an active Builder instance
     * @return True if the 'EventId' field has an active Builder instance
     */
    public boolean hasEventIdBuilder() {
      return EventIdBuilder != null;
    }

    /**
      * Clears the value of the 'EventId' field.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder clearEventId() {
      EventId = null;
      EventIdBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * the currency blockchain the token is associated to
      * @return The value.
      */
    public java.lang.String getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * the currency blockchain the token is associated to
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setCurrency(java.lang.String value) {
      validate(fields()[1], value);
      this.currency = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * the currency blockchain the token is associated to
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'currency' field.
      * the currency blockchain the token is associated to
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * KYC type, P for personal and B for business
      * @return The value.
      */
    public com.networknt.taiji.kyc.KycType getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * KYC type, P for personal and B for business
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setType(com.networknt.taiji.kyc.KycType value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * KYC type, P for personal and B for business
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * KYC type, P for personal and B for business
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * unique identifier for the user or business
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * unique identifier for the user or business
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setId(java.lang.String value) {
      validate(fields()[3], value);
      this.id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * unique identifier for the user or business
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'id' field.
      * unique identifier for the user or business
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * email address of the address owner or business contact
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * email address of the address owner or business contact
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setEmail(java.lang.String value) {
      validate(fields()[4], value);
      this.email = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * email address of the address owner or business contact
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'email' field.
      * email address of the address owner or business contact
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder clearEmail() {
      email = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * personal or business name
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * personal or business name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setName(java.lang.String value) {
      validate(fields()[5], value);
      this.name = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * personal or business name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'name' field.
      * personal or business name
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder clearName() {
      name = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'referralAddress' field.
      * referral address, optional with default value null
      * @return The value.
      */
    public java.lang.String getReferralAddress() {
      return referralAddress;
    }


    /**
      * Sets the value of the 'referralAddress' field.
      * referral address, optional with default value null
      * @param value The value of 'referralAddress'.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setReferralAddress(java.lang.String value) {
      validate(fields()[6], value);
      this.referralAddress = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'referralAddress' field has been set.
      * referral address, optional with default value null
      * @return True if the 'referralAddress' field has been set, false otherwise.
      */
    public boolean hasReferralAddress() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'referralAddress' field.
      * referral address, optional with default value null
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder clearReferralAddress() {
      referralAddress = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * public key for encryption
      * @return The value.
      */
    public java.lang.String getKey() {
      return key;
    }


    /**
      * Sets the value of the 'key' field.
      * public key for encryption
      * @param value The value of 'key'.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setKey(java.lang.String value) {
      validate(fields()[7], value);
      this.key = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * public key for encryption
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'key' field.
      * public key for encryption
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder clearKey() {
      key = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'verified' field.
      * If the email is verified
      * @return The value.
      */
    public boolean getVerified() {
      return verified;
    }


    /**
      * Sets the value of the 'verified' field.
      * If the email is verified
      * @param value The value of 'verified'.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setVerified(boolean value) {
      validate(fields()[8], value);
      this.verified = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'verified' field has been set.
      * If the email is verified
      * @return True if the 'verified' field has been set, false otherwise.
      */
    public boolean hasVerified() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'verified' field.
      * If the email is verified
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder clearVerified() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'tags' field.
      * tags to categorize the person or business
      * @return The value.
      */
    public java.util.List<java.lang.String> getTags() {
      return tags;
    }


    /**
      * Sets the value of the 'tags' field.
      * tags to categorize the person or business
      * @param value The value of 'tags'.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setTags(java.util.List<java.lang.String> value) {
      validate(fields()[9], value);
      this.tags = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'tags' field has been set.
      * tags to categorize the person or business
      * @return True if the 'tags' field has been set, false otherwise.
      */
    public boolean hasTags() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'tags' field.
      * tags to categorize the person or business
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder clearTags() {
      tags = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * Description of person or business which can be full text searched
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * Description of person or business which can be full text searched
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setDescription(java.lang.String value) {
      validate(fields()[10], value);
      this.description = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * Description of person or business which can be full text searched
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'description' field.
      * Description of person or business which can be full text searched
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder clearDescription() {
      description = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * time the event is recorded on the blockchain
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * time the event is recorded on the blockchain
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setTimestamp(long value) {
      validate(fields()[11], value);
      this.timestamp = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * time the event is recorded on the blockchain
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * time the event is recorded on the blockchain
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder clearTimestamp() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'offset' field.
      * kafka partition offset
      * @return The value.
      */
    public long getOffset() {
      return offset;
    }


    /**
      * Sets the value of the 'offset' field.
      * kafka partition offset
      * @param value The value of 'offset'.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setOffset(long value) {
      validate(fields()[12], value);
      this.offset = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'offset' field has been set.
      * kafka partition offset
      * @return True if the 'offset' field has been set, false otherwise.
      */
    public boolean hasOffset() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'offset' field.
      * kafka partition offset
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder clearOffset() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'partition' field.
      * kafka partition id
      * @return The value.
      */
    public int getPartition() {
      return partition;
    }


    /**
      * Sets the value of the 'partition' field.
      * kafka partition id
      * @param value The value of 'partition'.
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder setPartition(int value) {
      validate(fields()[13], value);
      this.partition = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'partition' field has been set.
      * kafka partition id
      * @return True if the 'partition' field has been set, false otherwise.
      */
    public boolean hasPartition() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'partition' field.
      * kafka partition id
      * @return This builder.
      */
    public com.networknt.taiji.kyc.KycCreatedEvent.Builder clearPartition() {
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public KycCreatedEvent build() {
      try {
        KycCreatedEvent record = new KycCreatedEvent();
        if (EventIdBuilder != null) {
          try {
            record.EventId = this.EventIdBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("EventId"));
            throw e;
          }
        } else {
          record.EventId = fieldSetFlags()[0] ? this.EventId : (com.networknt.taiji.event.EventId) defaultValue(fields()[0]);
        }
        record.currency = fieldSetFlags()[1] ? this.currency : (java.lang.String) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (com.networknt.taiji.kyc.KycType) defaultValue(fields()[2]);
        record.id = fieldSetFlags()[3] ? this.id : (java.lang.String) defaultValue(fields()[3]);
        record.email = fieldSetFlags()[4] ? this.email : (java.lang.String) defaultValue(fields()[4]);
        record.name = fieldSetFlags()[5] ? this.name : (java.lang.String) defaultValue(fields()[5]);
        record.referralAddress = fieldSetFlags()[6] ? this.referralAddress : (java.lang.String) defaultValue(fields()[6]);
        record.key = fieldSetFlags()[7] ? this.key : (java.lang.String) defaultValue(fields()[7]);
        record.verified = fieldSetFlags()[8] ? this.verified : (java.lang.Boolean) defaultValue(fields()[8]);
        record.tags = fieldSetFlags()[9] ? this.tags : (java.util.List<java.lang.String>) defaultValue(fields()[9]);
        record.description = fieldSetFlags()[10] ? this.description : (java.lang.String) defaultValue(fields()[10]);
        record.timestamp = fieldSetFlags()[11] ? this.timestamp : (java.lang.Long) defaultValue(fields()[11]);
        record.offset = fieldSetFlags()[12] ? this.offset : (java.lang.Long) defaultValue(fields()[12]);
        record.partition = fieldSetFlags()[13] ? this.partition : (java.lang.Integer) defaultValue(fields()[13]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<KycCreatedEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<KycCreatedEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<KycCreatedEvent>
    READER$ = (org.apache.avro.io.DatumReader<KycCreatedEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.EventId.customEncode(out);

    out.writeString(this.currency);

    out.writeEnum(this.type.ordinal());

    out.writeString(this.id);

    out.writeString(this.email);

    out.writeString(this.name);

    if (this.referralAddress == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.referralAddress);
    }

    out.writeString(this.key);

    out.writeBoolean(this.verified);

    if (this.tags == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.tags.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.String e0: this.tags) {
        actualSize0++;
        out.startItem();
        out.writeString(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.description == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.description);
    }

    out.writeLong(this.timestamp);

    out.writeLong(this.offset);

    out.writeInt(this.partition);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.EventId == null) {
        this.EventId = new com.networknt.taiji.event.EventId();
      }
      this.EventId.customDecode(in);

      this.currency = in.readString();

      this.type = com.networknt.taiji.kyc.KycType.values()[in.readEnum()];

      this.id = in.readString();

      this.email = in.readString();

      this.name = in.readString();

      if (in.readIndex() != 1) {
        in.readNull();
        this.referralAddress = null;
      } else {
        this.referralAddress = in.readString();
      }

      this.key = in.readString();

      this.verified = in.readBoolean();

      if (in.readIndex() != 1) {
        in.readNull();
        this.tags = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.String> a0 = this.tags;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("tags").schema().getTypes().get(1));
          this.tags = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readString();
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.description = null;
      } else {
        this.description = in.readString();
      }

      this.timestamp = in.readLong();

      this.offset = in.readLong();

      this.partition = in.readInt();

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.EventId == null) {
            this.EventId = new com.networknt.taiji.event.EventId();
          }
          this.EventId.customDecode(in);
          break;

        case 1:
          this.currency = in.readString();
          break;

        case 2:
          this.type = com.networknt.taiji.kyc.KycType.values()[in.readEnum()];
          break;

        case 3:
          this.id = in.readString();
          break;

        case 4:
          this.email = in.readString();
          break;

        case 5:
          this.name = in.readString();
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.referralAddress = null;
          } else {
            this.referralAddress = in.readString();
          }
          break;

        case 7:
          this.key = in.readString();
          break;

        case 8:
          this.verified = in.readBoolean();
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.tags = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.String> a0 = this.tags;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("tags").schema().getTypes().get(1));
              this.tags = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readString();
                a0.add(e0);
              }
            }
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.description = null;
          } else {
            this.description = in.readString();
          }
          break;

        case 11:
          this.timestamp = in.readLong();
          break;

        case 12:
          this.offset = in.readLong();
          break;

        case 13:
          this.partition = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










